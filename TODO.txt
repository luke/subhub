# SUBHUB
[x] - handle different messages, subscribe, unsubscribe, etc
[x] - test firehose mode works
[x] - quick check for race conditions 
[x] - add flags to server 
[x] - add to git! ready for push tomo
[x] - work out how to publish messages to server, something about client event

var foo = pusher.subscribe("foo");
foo.trigger('client-event', {"some":{"data": ["in","here"]} })

[x] - tidy up logging a bit 
[x] - check we get published events 
[x] - handle client events on the server, publish.. make sure socket_id is passed 

[x] [x] - object- / keyspace notification tracking in redis
	[x] - on subscribe get the key and send as json 
	[x] - on change notification, get again and send as json
	[x] - handle unsubscribe too 
	[ ] - make this optional in the settings for pubsub
[ ] - respect the debug flag 
[ ] - socket identification and presence
[ ] - socket state, with expires. allow clients to set some state
[ ] - data should be passed through during pubsub without any decoding. needs more testing
[ ] - auth on channel subscribe, private, and pusher style presense channels
[ ] - test with the flash transport (low priority)
[ ] - add some benchmarks, which is better normal or firehose
[ ] - add rate limits, max message sizes, etc 
[ ] - grab unminified pusher.js so its easier to follow

# PLAYER
[ ] - review the old player js 
[ ] - review the new player js 
[ ] - make a call on updating old or rolling with new
[ ] - integrate pusher into the new player js 
[ ] - way to sub / unsub between frames, unsub on page unload 
[ ] - think about the db structure some more 

# MOBILE 
... 